
/**
 *
 * 数据库的连接信息，在application.yml中配置，并指定特定的前缀
 *
 */
@Configuration
@AutoConfigureAfter({ DataBaseConfiguration.class })
@ComponentScan
public class MybatisConfiguration{

    @Resource(name= Constant.BUSINESS_DATA_SOURCE)
    private DataSource dataSource;

    @Resource(name = Constant.HISTORY_DATA_SOURCE)
    private DataSource historyDataSource;


    @Bean(name = Constant.BUSINESS_TRANSACTION_MANAGER)
    public PlatformTransactionManager transactionManager() {
        return new DataSourceTransactionManager(dataSource);
    }

    @Bean(name = Constant.HISTORY_TRANSACTION_MANAGER)
    public PlatformTransactionManager historyTransactionManager() {
        return new DataSourceTransactionManager(historyDataSource);
    }

    @Bean(name=Constant.BUSINESS_SQL_SESSION_TEMPLATE)
    public SqlSessionTemplate sqlSessionTemplate() throws Exception {
            return getSqlSessionTemplate(dataSource);
    }

    @Bean(name=Constant.HISTORY_SQL_SESSION_TEMPLATE)
    public SqlSessionTemplate historysqlSessionTemplate() throws Exception {
        return getSqlSessionTemplate(historyDataSource);
    }

    private SqlSessionTemplate getSqlSessionTemplate(DataSource dataSource) throws Exception {
        SqlSessionFactoryBean sessionFactory = newSqlSessionFactory(dataSource);
        return new SqlSessionTemplate(sessionFactory.getObject());
    }

    private SqlSessionFactoryBean newSqlSessionFactory(DataSource dataSource) throws IOException {
        SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
        sessionFactory.setDataSource(dataSource);
        sessionFactory.setFailFast(true);
        PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
        sessionFactory.setMapperLocations(resolver.getResources("classpath:/com/sumscope/bab/quote/mapping/*.xml"));
        return sessionFactory;
    }


}
